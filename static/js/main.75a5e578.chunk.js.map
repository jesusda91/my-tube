{"version":3,"sources":["logo.svg","components/Utils/Loading.js","Router.js","App.js","serviceWorker.js","store/index.js","reducers/application.reducer.js","reducers/index.js","helpers/history.js","index.js","constants/application.constants.js","constants/routes.js"],"names":["module","exports","Loading","className","HomeContainer","React","lazy","DetailContainer","LibraryContainer","SubscriptionsContainer","TrendingContainer","Router","props","fallback","exact","path","routes","component","render","title","match","params","App","Boolean","window","location","hostname","composeEnhancers","initialState","videos","currentPage","totalPages","requestingVideos","mapVideos","video","action","thumbAction","map","vid","combineReducers","applicationReducer","state","type","error","stateVideos","applicationConstants","GET_VIDEOS_REQUEST","GET_VIDEOS_FAILURE","errorGetVideos","GET_VIDEOS_SUCCESS","newArray","concat","LIKE_VIDEO","newVideosWithLike","DISLIKE_VIDEO","newVideosWithDislike","SET_CURRENT_PAGE","middleware","thunkMiddleware","compose","store","createStore","rootReducer","applyMiddleware","history","document","createElement","createMemoryHistory","initialEntries","createBrowserHistory","rootComponent","StrictMode","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","homeRoute","detailRoute","trendingRoute","subscriptionsRoute","libraryRoute"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,wJCQ5BC,EANC,kBACf,yBAAKC,UAAU,iEACd,uBAAGA,UAAU,mCCGTC,EAAgBC,IAAMC,MAAK,kBAAM,sDACjCC,EAAkBF,IAAMC,MAAK,kBAAM,sDACnCE,EAAmBH,IAAMC,MAAK,kBAAM,sDACpCG,EAAyBJ,IAAMC,MAAK,kBAAM,sDAC1CI,EAAoBL,IAAMC,MAAK,kBAAM,sDAkB5BK,EAhBA,SAAAC,GACd,OACC,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OACnB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMC,IAAkBC,UAAWb,IAChD,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAMC,MAAsBE,OAAQ,SAAAN,GAAK,OAAI,kBAACL,EAAD,CAAiBY,MAAOP,EAAMQ,MAAMC,OAAOF,WACrG,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAMC,IAAsBC,UAAWP,IACpD,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAMC,IAA2BC,UAAWR,IACzD,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAMC,IAAqBC,UAAWT,MCVvCc,G,MAJH,kBACX,kBAAC,EAAD,QCKmBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASN,MACvB,2D,ICXFO,E,6CCLEC,EAAe,CACpBC,OAAQ,GACRC,YAAa,EACbC,WAAY,EACZC,kBAAkB,GAGbC,EAAY,SAACJ,EAAQK,EAAOC,GACjC,IAAIC,EAAyB,UAAXD,EAAqB,KAAO,OAC9C,OAAON,EAAOQ,KAAI,SAAAC,GACjB,OAAIA,IAAQJ,GACI,UAAXC,GAA0C,SAApBG,EAAIF,aAC7BE,EAAG,WAEW,aAAXH,GAA6C,OAApBG,EAAIF,aAChCE,EAAG,QAEAA,EAAIF,cAAgBA,GACvBA,EAAc,KACdE,EAAIH,MAEJG,EAAIH,KAELG,EAAIH,GAAUG,EAAIH,GAAU,EAAI,EAAIG,EAAIH,GACjC,eAAKG,EAAZ,CAAiBF,iBAEXE,MCzBMC,cAAgB,CAC9BC,mBD4BiC,WAAmC,IAAlCC,EAAiC,uDAAzBb,EAAcO,EAAW,uCAC3DO,EAA4CP,EAA5CO,KAAMb,EAAsCM,EAAtCN,OAAQc,EAA8BR,EAA9BQ,MAAOT,EAAuBC,EAAvBD,MAAOJ,EAAgBK,EAAhBL,YACpBc,EAAgBH,EAAxBZ,OACR,OAAQa,GACP,KAAKG,IAAqBC,mBACzB,OAAO,eAAKL,EAAZ,CAAmBT,kBAAkB,IACtC,KAAKa,IAAqBE,mBACzB,OAAO,eAAKN,EAAZ,CAAmBO,eAAgBL,EAAOX,kBAAkB,IAC7D,KAAKa,IAAqBI,mBACzB,IAAMC,EAAWN,EAAYO,OAAOtB,GACpC,OAAO,eAAKY,EAAZ,CAAmBZ,OAAQqB,EAAUlB,kBAAkB,IACxD,KAAKa,IAAqBO,WACzB,IAAMC,EAAoBpB,EAAUW,EAAaV,EAAO,SACxD,OAAO,eAAKO,EAAZ,CAAmBZ,OAAQwB,IAC5B,KAAKR,IAAqBS,cACzB,IAAMC,EAAuBtB,EAAUW,EAAaV,EAAO,YAC3D,OAAO,eAAKO,EAAZ,CAAmBZ,OAAQ0B,IAC5B,KAAKV,IAAqBW,iBACzB,OAAO,eAAKf,EAAZ,CAAmBX,gBACpB,QACC,OAAOW,MD9CNgB,EAAa,CAACC,KAQjB/B,EAAmBgC,IAGb,IAAMC,EAAQC,YACpBC,EACAnC,EAAiBoC,IAAe,WAAf,EAAmBN,K,OGXxBO,IALM,qBAAXxC,QACPA,OAAOyC,UACPzC,OAAOyC,SAASC,eAIdC,YAAoB,CACrBC,eAAgB,CAAC,OAEhBC,cCFGC,EACL,kBAAC,IAAD,CAAUV,MAAOA,GAChB,kBAAC,IAAMW,WAAP,KACC,kBAAC,IAAD,CAAQP,QAASA,GAChB,kBAAC,EAAD,SAMJQ,IAAStD,OAAOoD,EAAeL,SAASQ,eAAe,SL+GjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a,+BMzI5B,kCAAO,IAAMrC,EAAuB,CACnCC,mBAAoB,qBACpBG,mBAAoB,qBACpBF,mBAAoB,qBACpBK,WAAY,aACZE,cAAe,gBACfE,iBAAkB,qB,+BCNnB,0KAAO,IAAM2B,EAAY,IACZC,EAAc,eAACjE,EAAD,uDAAS,SAAT,uBAAgCA,IAC9CkE,EAAgB,YAChBC,EAAqB,iBACrBC,EAAe,a","file":"static/js/main.75a5e578.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nconst Loading = () => (\n\t<div className=\"d-flex w-100 vh-100 align-items-center justify-content-center\">\n\t\t<i className=\"fal fa-spinner fa-spin fa-2x\"></i>\n\t</div>\n)\n\nexport default Loading;","\nimport React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route } from 'react-router-dom';\nimport * as routes from './constants/routes';\nimport Loading from './components/Utils/Loading';\n\nconst HomeContainer = React.lazy(() => import('./containers/HomeContainer'));\nconst DetailContainer = React.lazy(() => import('./containers/DetailContainer'));\nconst LibraryContainer = React.lazy(() => import('./containers/LibraryContainer'));\nconst SubscriptionsContainer = React.lazy(() => import('./containers/SubscriptionsContainer'));\nconst TrendingContainer = React.lazy(() => import('./containers/TrendingContainer'));\n\nconst Router = props => {\n\treturn (\n\t\t<Suspense fallback={<Loading />}>\n\t\t\t<Route exact path={routes.homeRoute} component={HomeContainer} />\n\t\t\t<Route exact path={routes.detailRoute()} render={props => <DetailContainer title={props.match.params.title} />} />\n\t\t\t<Route exact path={routes.trendingRoute} component={TrendingContainer} />\n\t\t\t<Route exact path={routes.subscriptionsRoute} component={SubscriptionsContainer} />\n\t\t\t<Route exact path={routes.libraryRoute} component={LibraryContainer} />\n\t\t</Suspense>\n\t);\n};\n\nRouter.propTypes = {\n\n};\n\nexport default Router;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Router from './Router';\nimport './styles/general.scss';\n\nconst App = () => (\n\t<Router />\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from './../reducers';\nimport { NODE_ENV } from '../constants/env';\n\nlet middleware = [thunkMiddleware]\nlet composeEnhancers;\n\nif (NODE_ENV === \"development\") {\n\tconst loggerMiddleware = createLogger();\n\tmiddleware.push(loggerMiddleware);\n\tcomposeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n} else {\n\tcomposeEnhancers = compose;\n}\n\nexport const store = createStore(\n\trootReducer,\n\tcomposeEnhancers(applyMiddleware(...middleware))\n);","import { applicationConstants } from '../constants/application.constants';\n\nconst initialState = {\n\tvideos: [],\n\tcurrentPage: 1,\n\ttotalPages: 3,\n\trequestingVideos: false\n}\n\nconst mapVideos = (videos, video, action) => {\n\tlet thumbAction = action === \"likes\" ? \"up\" : \"down\";\n\treturn videos.map(vid => {\n\t\tif (vid === video) {\n\t\t\tif (action === \"likes\" && vid.thumbAction === \"down\") {\n\t\t\t\tvid[\"dislikes\"]--;\n\t\t\t}\n\t\t\tif (action === \"dislikes\" && vid.thumbAction === \"up\") {\n\t\t\t\tvid[\"likes\"]--;\n\t\t\t}\n\t\t\tif (vid.thumbAction === thumbAction) {\n\t\t\t\tthumbAction = null;\n\t\t\t\tvid[action]--;\n\t\t\t} else {\n\t\t\t\tvid[action]++;\n\t\t\t}\n\t\t\tvid[action] = vid[action] < 0 ? 0 : vid[action];\n\t\t\treturn { ...vid, thumbAction }\n\t\t}\n\t\treturn vid;\n\t})\n};\n\nexport const applicationReducer = (state = initialState, action) => {\n\tconst { type, videos, error, video, currentPage } = action;\n\tconst { videos: stateVideos } = state;\n\tswitch (type) {\n\t\tcase applicationConstants.GET_VIDEOS_REQUEST:\n\t\t\treturn { ...state, requestingVideos: true };\n\t\tcase applicationConstants.GET_VIDEOS_FAILURE:\n\t\t\treturn { ...state, errorGetVideos: error, requestingVideos: false };\n\t\tcase applicationConstants.GET_VIDEOS_SUCCESS:\n\t\t\tconst newArray = stateVideos.concat(videos);\n\t\t\treturn { ...state, videos: newArray, requestingVideos: false };\n\t\tcase applicationConstants.LIKE_VIDEO:\n\t\t\tconst newVideosWithLike = mapVideos(stateVideos, video, \"likes\");\n\t\t\treturn { ...state, videos: newVideosWithLike };\n\t\tcase applicationConstants.DISLIKE_VIDEO:\n\t\t\tconst newVideosWithDislike = mapVideos(stateVideos, video, \"dislikes\");\n\t\t\treturn { ...state, videos: newVideosWithDislike };\n\t\tcase applicationConstants.SET_CURRENT_PAGE:\n\t\t\treturn { ...state, currentPage };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import { combineReducers } from \"redux\";\nimport { applicationReducer } from './application.reducer';\n\nexport default combineReducers({\n\tapplicationReducer,\n});","import { createBrowserHistory, createMemoryHistory } from 'history';\n\nexport const isServer = !(\n\ttypeof window !== 'undefined' &&\n\twindow.document &&\n\twindow.document.createElement\n);\n\nexport const history = isServer\n\t? createMemoryHistory({\n\t\tinitialEntries: [\"/\"]\n\t})\n\t: createBrowserHistory();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport { Router } from 'react-router-dom';\nimport { history } from './helpers/history';\n\nconst rootComponent = (\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<Router history={history}>\n\t\t\t\t<App />\n\t\t\t</Router>\n\t\t</React.StrictMode>\n\t</Provider>\n);\n\nReactDOM.render(rootComponent, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const applicationConstants = {\n\tGET_VIDEOS_REQUEST: \"GET_VIDEOS_REQUEST\",\n\tGET_VIDEOS_SUCCESS: \"GET_VIDEOS_SUCCESS\",\n\tGET_VIDEOS_FAILURE: \"GET_VIDEOS_FAILURE\",\n\tLIKE_VIDEO: \"LIKE_VIDEO\",\n\tDISLIKE_VIDEO: \"DISLIKE_VIDEO\",\n\tSET_CURRENT_PAGE: \"SET_CURRENT_PAGE\",\n}\n","export const homeRoute = '/';\nexport const detailRoute = (title = ':title') => `/video/${title}`;\nexport const trendingRoute = '/trending';\nexport const subscriptionsRoute = '/subscriptions';\nexport const libraryRoute = '/library';"],"sourceRoot":""}